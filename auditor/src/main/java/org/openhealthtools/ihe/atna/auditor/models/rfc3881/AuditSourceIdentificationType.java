/*******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-558 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.08.13 at 04:13:48 PM PDT 
//


package org.openhealthtools.ihe.atna.auditor.models.rfc3881;

import org.apache.commons.lang3.StringEscapeUtils;
import org.openhealthtools.ihe.atna.auditor.codes.rfc3881.RFC3881AuditSourceTypes;
import org.openhealthtools.ihe.atna.auditor.utils.EventUtils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;


/**
 * <p>Java class for AuditSourceIdentificationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AuditSourceIdentificationType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="AuditSourceTypeCode" maxOccurs="unbounded" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{}CodedValueType">
 *                 &lt;attribute name="code" use="required">
 *                   &lt;simpleType>
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *                       &lt;enumeration value="1"/>
 *                       &lt;enumeration value="2"/>
 *                       &lt;enumeration value="3"/>
 *                       &lt;enumeration value="4"/>
 *                       &lt;enumeration value="5"/>
 *                       &lt;enumeration value="6"/>
 *                       &lt;enumeration value="7"/>
 *                       &lt;enumeration value="8"/>
 *                       &lt;enumeration value="9"/>
 *                     &lt;/restriction>
 *                   &lt;/simpleType>
 *                 &lt;/attribute>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="AuditEnterpriseSiteID" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="AuditSourceID" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
//@XmlAccessorType(XmlAccessType.FIELD)
//@XmlType(name = "AuditSourceIdentificationType", propOrder = { "auditSourceTypeCode" })
public class AuditSourceIdentificationType {

    //@XmlElement(name = "AuditSourceTypeCode")
    protected List<AuditSourceType> auditSourceTypeCode;
    //@XmlAttribute(name = "AuditEnterpriseSiteID")
    protected String auditEnterpriseSiteID;
    //@XmlAttribute(name = "AuditSourceID", required = true)
    protected String auditSourceID;

    public String toString(boolean useSpacing)
    {
    	StringBuilder sb = new StringBuilder();
    	if (useSpacing) {
    		sb.append("\n");
    	}
    	sb.append("<AuditSourceIdentification");

        //AuditEnterpriseSiteID
        if (auditEnterpriseSiteID != null) {
            sb.append(" AuditEnterpriseSiteID=\"");
            sb.append(StringEscapeUtils.escapeXml10(auditEnterpriseSiteID));
            sb.append("\"");
        }

        //AuditSourceID
        sb.append(" AuditSourceID=\"");
        if ((auditSourceID != null) && ! auditSourceID.isEmpty()) {
            sb.append(StringEscapeUtils.escapeXml10(auditSourceID));
        } else {
            sb.append("unknown");
        }
        sb.append("\"");
        sb.append(">");

        if (useSpacing) {
            sb.append("\n");
        }

        if (auditSourceTypeCode == null) {
            auditSourceTypeCode = Collections.singletonList(new RFC3881AuditSourceTypes.Other());
        }

        for (AuditSourceType auditSourceType: auditSourceTypeCode) {
            sb.append(auditSourceType.toString());
            if (useSpacing) {
                sb.append("\n");
            }
        }
        sb.append("</AuditSourceIdentification>");
        if (useSpacing) {
            sb.append("\n");
        }
    	return sb.toString();
    }
    
    public String toString()
    {
    	return toString(true);
    }

    /**
     * Gets the value of the auditSourceTypeCode property.
     * @deprecated use {@link #getAuditSourceType()}
     */
    public CodedValueType getAuditSourceTypeCode() {
        if (EventUtils.isEmptyOrNull(auditSourceTypeCode)) {
            return null;
        }
        AuditSourceType auditSourceType = auditSourceTypeCode.get(0);
        CodedValueType codedValueType = new CodedValueType();
        codedValueType.setCode(auditSourceType.getCode());
        codedValueType.setCodeSystem(auditSourceType.getCodeSystem());
        codedValueType.setCodeSystemName(auditSourceType.getCodeSystemName());
        codedValueType.setOriginalText(auditSourceType.getOriginalText());
        return codedValueType;
    }

    public List<AuditSourceType> getAuditSourceType() {
        if (auditSourceTypeCode == null) {
            auditSourceTypeCode = new ArrayList<>();
        }
        return this.auditSourceTypeCode;
    }

    /**
     * Sets the value of the auditSourceTypeCode property.
     * @deprecated use {@link #getAuditSourceType() and add to the list}
     */
    public void setAuditSourceTypeCode(CodedValueType auditSourceTypeCode) {
        AuditSourceType auditSourceType = new AuditSourceType();
        auditSourceType.setCode(auditSourceTypeCode.getCode());
        auditSourceType.setCodeSystem(auditSourceTypeCode.getCodeSystem());
        auditSourceType.setCodeSystemName(auditSourceTypeCode.getCodeSystemName());
        auditSourceType.setOriginalText(auditSourceTypeCode.getOriginalText());
    }

    /**
     * Gets the value of the auditEnterpriseSiteID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuditEnterpriseSiteID() {
        return auditEnterpriseSiteID;
    }

    /**
     * Sets the value of the auditEnterpriseSiteID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuditEnterpriseSiteID(String value) {
        this.auditEnterpriseSiteID = value;
    }

    /**
     * Gets the value of the auditSourceID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuditSourceID() {
        return auditSourceID;
    }

    /**
     * Sets the value of the auditSourceID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuditSourceID(String value) {
        this.auditSourceID = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AuditSourceIdentificationType)) return false;
        AuditSourceIdentificationType that = (AuditSourceIdentificationType) o;
        return Objects.equals(auditSourceTypeCode, that.auditSourceTypeCode) &&
                Objects.equals(auditEnterpriseSiteID, that.auditEnterpriseSiteID) &&
                Objects.equals(auditSourceID, that.auditSourceID);
    }

    @Override
    public int hashCode() {
        return Objects.hash(auditSourceTypeCode, auditEnterpriseSiteID, auditSourceID);
    }
}
